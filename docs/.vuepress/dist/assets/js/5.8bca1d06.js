(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{318:function(a,v,t){"use strict";t.r(v);var s=t(7),_=Object(s.a)({},(function(){var a=this,v=a._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[v("h1",{attrs:{id:"面试准备"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#面试准备"}},[a._v("#")]),a._v(" 面试准备")]),a._v(" "),v("h2",{attrs:{id:"tips"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tips"}},[a._v("#")]),a._v(" tips")]),a._v(" "),v("h3",{attrs:{id:"以求职为导向来学习"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#以求职为导向来学习"}},[a._v("#")]),a._v(" 以求职为导向来学习")]),a._v(" "),v("p",[a._v("项目经历")]),a._v(" "),v("p",[v("img",{attrs:{src:"https://raw.githubusercontent.com/SweetPomelo0/picGo/main/img/202212261443231.png",alt:"image-20221226113351449"}})]),a._v(" "),v("h3",{attrs:{id:"项目经验指南"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#项目经验指南"}},[a._v("#")]),a._v(" 项目经验指南")]),a._v(" "),v("h4",{attrs:{id:"实战项目"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#实战项目"}},[a._v("#")]),a._v(" 实战项目")]),a._v(" "),v("p",[a._v("尚硅谷-Java项目《谷粒商城》 105h")]),a._v(" "),v("p",[a._v("一定要有自己的思考，不要浅尝辄止")]),a._v(" "),v("h4",{attrs:{id:"实战类开源项目"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#实战类开源项目"}},[a._v("#")]),a._v(" 实战类开源项目")]),a._v(" "),v("ul",[v("li",[a._v("权限管理系统")])]),a._v(" "),v("p",[a._v("https://github.com/Heeexy/SpringBoot-Shiro-Vue")]),a._v(" "),v("ul",[v("li",[a._v("自定义 RPC 框架")])]),a._v(" "),v("p",[a._v("https://github.com/Snailclimb/guide-rpc-framework")]),a._v(" "),v("ul",[v("li",[a._v("mini-spring")])]),a._v(" "),v("p",[a._v("https://github.com/DerekYRC/mini-spring")]),a._v(" "),v("ul",[v("li",[a._v("手写Java虚拟机")])]),a._v(" "),v("p",[a._v("https://zachaxy.github.io/2017/05/06/%E6%89%8B%E5%86%99JVM%E7%B3%BB%E5%88%97-1-%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/")]),a._v(" "),v("h1",{attrs:{id:"java"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java"}},[a._v("#")]),a._v(" Java")]),a._v(" "),v("h2",{attrs:{id:"基础"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基础"}},[a._v("#")]),a._v(" 基础")]),a._v(" "),v("h3",{attrs:{id:"基础概念与常识"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基础概念与常识"}},[a._v("#")]),a._v(" 基础概念与常识")]),a._v(" "),v("h4",{attrs:{id:"java语言有哪些特点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java语言有哪些特点"}},[a._v("#")]),a._v(" Java语言有哪些特点？")]),a._v(" "),v("ul",[v("li",[a._v("面对对象（封装 继承 多态）")]),a._v(" "),v("li",[a._v("平台无关性（Java虚拟机实现与平台无关性）")]),a._v(" "),v("li",[a._v("可靠性 安全性")]),a._v(" "),v("li",[a._v("支持网络编程而且很方便")]),a._v(" "),v("li",[a._v("编译与解释并存")]),a._v(" "),v("li",[a._v("生态强大")])]),a._v(" "),v("h4",{attrs:{id:"jvm-vs-jdk-vs-jre"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#jvm-vs-jdk-vs-jre"}},[a._v("#")]),a._v(" JVM vs JDK vs JRE")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("JVM：Java虚拟机，是运行Java字节码的虚拟机。JVM有针对不同系统的特定实现，目的是使用相同的字节码，它们总会给出相同的结果。字节码和不同系统的JVM实现是Java语言一次编译，随处可以运行的关键")])]),a._v(" "),v("li",[v("p",[a._v("JDK：Java Development Kit，是功能齐全的Java SDK，拥有JRE的一切，还有编译器javac和工具javadoc和jdb，能够创建和编译程序")])]),a._v(" "),v("li",[v("p",[a._v("JRE：Java运行时环境，是运行已编译Java程序所需的所有内容的集合，包括Java虚拟机JVM，Java类库，Java命令和其他的一些基础构件，但是不能用于创建新程序")])])]),a._v(" "),v("h4",{attrs:{id:"什么是字节码-采用字节码的好处"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么是字节码-采用字节码的好处"}},[a._v("#")]),a._v(" 什么是字节码？采用字节码的好处？")]),a._v(" "),v("p",[a._v("JVM可以理解的代码就叫做字节码，扩展名是.class，它不面向任何特定的处理器，只面对虚拟机。Java语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植性的特点。所以Java语言运行时相对来说高效，而且，由于字节码不针对一种特定的机器，因此，Java程序无须重新编译便可在多种不同操作系统的计算机运行")]),a._v(" "),v("p",[v("strong",[a._v("Java程序从源代码到运行的过程：")])]),a._v(" "),v("p",[a._v(".java - javac编译 - .class - 解释器&JIT - 机器可解释的代码")]),a._v(" "),v("p",[v("strong",[a._v("解释器和JIT/编译和解释共存的原因")])]),a._v(" "),v("p",[v("code",[a._v(".class->机器码")]),a._v("，在这步JVM类加载器首先加载字节码文件，然后通过解释器逐行解释执行，这种方式的执行速度会相对比较慢。而且有些方式和代码块是需要经常被调用的(也就是所谓的热点代码)，所以后面引进了JIT(Just-In-Time Compilation)编译器，而JIT属于运行时编译。当JIT编译器完成第一次编译后，其会将字节码对应的机器码保存下来。下次可以直接使用。而我们知道，机器码的运行效率肯定是高于Java编译器的，这也解释了我们为什么经常会说Java是编译与解释共存的语言。")]),a._v(" "),v("blockquote",[v("p",[a._v("Java9引入了一种新的编译模式AOT(Ahead of Time Compilation)，它是直接将字节码编译成机器码，这样就避免了JIT预热等各方面的开销。JDK支持分层编译和AOT协作使用")])]),a._v(" "),v("h4",{attrs:{id:"为什么不全部使用aot"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#为什么不全部使用aot"}},[a._v("#")]),a._v(" 为什么不全部使用AOT")]),a._v(" "),v("p",[a._v("AOT可以提前编译节省启动时间，为什么不全部使用这种编译方式？")]),a._v(" "),v("p",[a._v("Java语言有着动态特性，例如，CGLIB动态代理使用的是ASM技术，而这种技术大致原理是运行时直接在内存中生成并加载修改后的字节码文件，如果全部使用AOT提前编译，就不能使用ASM技术。为了支持类似的动态特性，所以选择使用JIT即时编译器")]),a._v(" "),v("h4",{attrs:{id:"为什么说java语言-编译和解释共存"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#为什么说java语言-编译和解释共存"}},[a._v("#")]),a._v(" 为什么说Java语言“编译和解释共存”")]),a._v(" "),v("p",[a._v("高级编程语言按照程序的执行方式分为两种")]),a._v(" "),v("ul",[v("li",[a._v("编译型：编译型语言会通过编译器将源代码一次性翻译为可被该平台执行的机器码，一般情况下，编译语言的执行速度比较快，开发效率较低")]),a._v(" "),v("li",[a._v("解释型：解释型语言会通过解释器一句一句将代码翻译为机器代码后再执行。解释型语言开发效率比较快，执行速度比较慢。")])]),a._v(" "),v("p",[a._v("Java语言既具有编译型语言的特征，也具有解释型语言的特征。这是因为Java程序要经过先编译，后解释两个步骤，由Java编写的程序需要先经过编译步骤，生成字节码文件，然后字节码由解释器来解释执行")]),a._v(" "),v("h3",{attrs:{id:"基础语法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基础语法"}},[a._v("#")]),a._v(" 基础语法")]),a._v(" "),v("h4",{attrs:{id:"注释有哪几种形式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#注释有哪几种形式"}},[a._v("#")]),a._v(" 注释有哪几种形式？")]),a._v(" "),v("p",[a._v("Java中的注释有三种：")]),a._v(" "),v("ul",[v("li",[a._v("单行注释")]),a._v(" "),v("li",[a._v("多行注释")]),a._v(" "),v("li",[a._v("文档注释")])]),a._v(" "),v("h4",{attrs:{id:"标识符和关键字的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#标识符和关键字的区别"}},[a._v("#")]),a._v(" 标识符和关键字的区别？")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("标识符是一个名字，程序、类、变量、方法的名字")])]),a._v(" "),v("li",[v("p",[a._v("关键字是被赋予特殊含义的标识符。有一些标识符在Java语言中已经赋予其特殊的含义，只能用于特定的地方，这些特殊的标识符就是关键字")])])]),a._v(" "),v("h4",{attrs:{id:"java语言关键字有哪些"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java语言关键字有哪些"}},[a._v("#")]),a._v(" Java语言关键字有哪些？")]),a._v(" "),v("p",[v("img",{attrs:{src:"https://raw.githubusercontent.com/SweetPomelo0/picGo/main/img/202212261456310.png",alt:"image-20221226145612527"}})])])}),[],!1,null,null,null);v.default=_.exports}}]);